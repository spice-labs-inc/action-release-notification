name: 'Spice Labs Slack Notifications'
description: 'Send standardized release, deployment, and staging notifications to Slack with GitHub→Slack username mapping'
author: 'Spice Labs Inc'

inputs:
  # Required
  type:
    description: 'Notification type: release, deployment-success, deployment-failure, staging'
    required: true
  slack-bot-token:
    description: 'Slack bot token (xoxb-...)'
    required: true
  channel:
    description: 'Slack channel ID or name (e.g. #releases or C1234567890)'
    required: true
    default: '#release-notifications'
  channel-id:
    description: 'Slack channel ID for reactions (use output from release notification)'
    required: false
  
  # GitHub→Slack username mapping
  username-mapping:
    description: 'JSON object mapping GitHub usernames to Slack user IDs {"github_user": "U1234567890"}'
    required: false
  
  # Release notification inputs (auto-generated by default)
  release-tag:
    description: 'Release tag (e.g. v1.2.3) - optional, will use latest release if not provided'
    required: false
  github-token:
    description: 'GitHub token for API access - required for auto-generation'
    required: false
    
  # Deployment notification inputs
  workflow-name:
    description: 'Name of the workflow/deployment - required for deployment types'
    required: false
  workflow-url:
    description: 'Link to the workflow run - auto-generated if not provided'
    required: false
  environment:
    description: 'Deployment environment (e.g. production, staging) - required for deployment types'
    required: false
  thread-ts:
    description: 'Timestamp of message to reply to (for threading deployment updates to release messages)'
    required: false
    
  # Staging notification inputs
  commit-message:
    description: 'Commit message for staging deployments'
    required: false
  staging-url:
    description: 'URL to the staging environment'
    required: false
    
  # Common optional inputs
  actor:
    description: 'GitHub username who triggered the action'
    required: false
    default: ${{ github.actor }}
  repository:
    description: 'Repository name'
    required: false
    default: ${{ github.repository }}
  branch:
    description: 'Branch name'
    required: false
    default: ${{ github.ref_name }}
  commit-sha:
    description: 'Commit SHA (short version recommended)'
    required: false

outputs:
  timestamp:
    description: 'Timestamp of the sent message (for threading replies)'
    value: ${{ steps.extract-ts.outputs.timestamp }}
  channel_id:
    description: 'Channel ID of the sent message (for reactions)'
    value: ${{ steps.extract-ts.outputs.channel_id }}

runs:
  using: 'composite'
  steps:
    - name: Validate inputs
      shell: bash
      run: |
        case "${{ inputs.type }}" in
          "release")
            if [ -z "${{ inputs.github-token }}" ]; then
              echo "ERROR: 'github-token' required for release notifications"
              exit 1
            fi
            ;;
          "deployment-success"|"deployment-failure")
            if [ -z "${{ inputs.workflow-name }}" ] || [ -z "${{ inputs.environment }}" ]; then
              echo "ERROR: deployment notifications require 'workflow-name' and 'environment' inputs"
              exit 1
            fi
            ;;
          "staging")
            # Staging is more flexible, no required fields beyond the common ones
            ;;
          *)
            echo "ERROR: Invalid notification type '${{ inputs.type }}'. Must be: release, deployment-success, deployment-failure, or staging"
            exit 1
            ;;
        esac

    - name: Map GitHub username to Slack
      id: map-user
      shell: bash
      run: |
        MAPPING='${{ inputs.username-mapping }}'
        GITHUB_USER="${{ inputs.actor }}"
        
        if [ "$MAPPING" != "{}" ] && [ -n "$MAPPING" ]; then
          SLACK_USER=$(echo "$MAPPING" | jq -r --arg user "$GITHUB_USER" '.[$user] // $user')
        else
          SLACK_USER="$GITHUB_USER"
        fi
        
        # Format for Slack mention if it's a Slack user ID (starts with U and 11 chars total)
        if [[ $SLACK_USER =~ ^U[A-Z0-9]{10}$ ]]; then
          echo "slack-mention=<@$SLACK_USER>" >> $GITHUB_OUTPUT
        else
          echo "slack-mention=@$SLACK_USER" >> $GITHUB_OUTPUT
        fi

    - name: Auto-generate release info
      if: inputs.type == 'release'
      id: auto-release
      shell: bash
      run: |
        # Get latest release if no tag specified
        if [ -z "${{ inputs.release-tag }}" ]; then
          RELEASE_INFO=$(curl -s -H "Authorization: token ${{ inputs.github-token }}" \
            "https://api.github.com/repos/${{ inputs.repository }}/releases/latest")
          TAG_NAME=$(echo "$RELEASE_INFO" | jq -r '.tag_name')
          RELEASE_NAME=$(echo "$RELEASE_INFO" | jq -r '.name // .tag_name')
          RELEASE_BODY=$(echo "$RELEASE_INFO" | jq -r '.body // ""')
          RELEASE_URL=$(echo "$RELEASE_INFO" | jq -r '.html_url')
        else
          # Get specific release by tag
          RELEASE_INFO=$(curl -s -H "Authorization: token ${{ inputs.github-token }}" \
            "https://api.github.com/repos/${{ inputs.repository }}/releases/tags/${{ inputs.release-tag }}")
          TAG_NAME="${{ inputs.release-tag }}"
          RELEASE_NAME=$(echo "$RELEASE_INFO" | jq -r '.name // .tag_name')
          RELEASE_BODY=$(echo "$RELEASE_INFO" | jq -r '.body // ""')
          RELEASE_URL=$(echo "$RELEASE_INFO" | jq -r '.html_url')
        fi
        
        echo "tag=$TAG_NAME" >> $GITHUB_OUTPUT
        echo "name=$RELEASE_NAME" >> $GITHUB_OUTPUT
        echo "url=$RELEASE_URL" >> $GITHUB_OUTPUT
        echo "body<<EOF" >> $GITHUB_OUTPUT
        echo "$RELEASE_BODY" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT

    - name: Get release contributors
      if: inputs.type == 'release' && inputs.github-token != ''
      id: release-contributors
      shell: bash
      run: |
        # Get commits since last release
        RELEASE_INFO=$(curl -s -H "Authorization: token ${{ inputs.github-token }}" \
          "https://api.github.com/repos/${{ inputs.repository }}/releases")
        
        CURRENT_TAG="${{ inputs.release-tag }}"
        if [ -z "$CURRENT_TAG" ]; then
          CURRENT_TAG=$(echo "$RELEASE_INFO" | jq -r '.[0].tag_name')
        fi
        
        # Get previous release tag for comparison
        PREV_TAG=$(echo "$RELEASE_INFO" | jq -r --arg current "$CURRENT_TAG" '.[] | select(.tag_name != $current) | .tag_name' | head -1)
        
        if [ "$PREV_TAG" != "null" ] && [ -n "$PREV_TAG" ]; then
          # Compare commits between tags
          COMMITS=$(curl -s -H "Authorization: token ${{ inputs.github-token }}" \
            "https://api.github.com/repos/${{ inputs.repository }}/compare/${PREV_TAG}...${CURRENT_TAG}")
          CONTRIBUTORS=$(echo "$COMMITS" | jq -r '.commits[].author.login' | sort -u | grep -v null || true)
        else
          # First release - get recent commits
          COMMITS=$(curl -s -H "Authorization: token ${{ inputs.github-token }}" \
            "https://api.github.com/repos/${{ inputs.repository }}/commits?per_page=10")
          CONTRIBUTORS=$(echo "$COMMITS" | jq -r '.[].author.login' | sort -u | grep -v null || true)
        fi
        
        # Map contributors to Slack mentions
        MAPPING='${{ inputs.username-mapping }}'
        SLACK_MENTIONS=""
        
        if [ -n "$CONTRIBUTORS" ]; then
          for contributor in $CONTRIBUTORS; do
            if [ "$MAPPING" != "{}" ] && [ -n "$MAPPING" ]; then
              SLACK_USER=$(echo "$MAPPING" | jq -r --arg user "$contributor" '.[$user] // $user')
            else
              SLACK_USER="$contributor"
            fi
            
            # Format for Slack mention
            if [[ $SLACK_USER =~ ^U[A-Z0-9]{10}$ ]]; then
              SLACK_MENTIONS="$SLACK_MENTIONS <@$SLACK_USER>"
            else
              SLACK_MENTIONS="$SLACK_MENTIONS @$SLACK_USER"
            fi
          done
        fi
        
        echo "mentions=$SLACK_MENTIONS" >> $GITHUB_OUTPUT

    - name: Generate workflow URL
      if: startsWith(inputs.type, 'deployment-')
      id: workflow-url
      shell: bash
      run: |
        if [ -n "${{ inputs.workflow-url }}" ]; then
          echo "url=${{ inputs.workflow-url }}" >> $GITHUB_OUTPUT
        else
          # Generate the current workflow run URL
          RUN_URL="https://github.com/${{ inputs.repository }}/actions/runs/${{ github.run_id }}"
          echo "url=$RUN_URL" >> $GITHUB_OUTPUT
        fi

    - name: Auto-generate staging notes from commits
      if: inputs.type == 'staging' && inputs.github-token != ''
      id: staging-notes
      shell: bash
      run: |
        # Get commits from the current push event
        PUSH_COMMITS='${{ toJson(github.event.commits) }}'
        
        # If we have push commits, use them; otherwise fall back to recent commits
        if [ "$PUSH_COMMITS" != "null" ] && [ "$PUSH_COMMITS" != "[]" ]; then
          echo "Using commits from current push event"
          COMMITS="$PUSH_COMMITS"
          # Format with GitHub links - let jq handle the formatting naturally
          COMMIT_NOTES=$(echo "$COMMITS" | jq -r --arg repo "${{ inputs.repository }}" '.[] | "• <https://github.com/" + $repo + "/commit/" + .id + "|" + .message + ">"')
        else
          echo "Falling back to recent commits"
          COMMITS=$(curl -s -H "Authorization: token ${{ inputs.github-token }}" \
            "https://api.github.com/repos/${{ inputs.repository }}/commits?sha=${{ inputs.branch }}&per_page=5")
          # Format with GitHub links - let jq handle the formatting naturally
          COMMIT_NOTES=$(echo "$COMMITS" | jq -r --arg repo "${{ inputs.repository }}" '.[] | "• <https://github.com/" + $repo + "/commit/" + .sha + "|" + .commit.message + ">"')
        fi
        
        # Get contributors from commits (handle different JSON structures)
        if [ "$PUSH_COMMITS" != "null" ] && [ "$PUSH_COMMITS" != "[]" ]; then
          # Push event commits use .author.username
          CONTRIBUTORS=$(echo "$COMMITS" | jq -r '.[].author.username' | sort -u | grep -v null || true)
        else
          # API commits use .author.login
          CONTRIBUTORS=$(echo "$COMMITS" | jq -r '.[].author.login' | sort -u | grep -v null || true)
        fi
        
        # Map contributors to Slack mentions
        MAPPING='${{ inputs.username-mapping }}'
        SLACK_MENTIONS=""
        
        if [ -n "$CONTRIBUTORS" ]; then
          for contributor in $CONTRIBUTORS; do
            if [ "$MAPPING" != "{}" ] && [ -n "$MAPPING" ]; then
              SLACK_USER=$(echo "$MAPPING" | jq -r --arg user "$contributor" '.[$user] // $user')
            else
              SLACK_USER="$contributor"
            fi
            
            # Format for Slack mention
            if [[ $SLACK_USER =~ ^U[A-Z0-9]{10}$ ]]; then
              SLACK_MENTIONS="$SLACK_MENTIONS <@$SLACK_USER>"
            else
              SLACK_MENTIONS="$SLACK_MENTIONS @$SLACK_USER"
            fi
          done
        fi
        
        echo "notes<<EOF" >> $GITHUB_OUTPUT
        echo "$COMMIT_NOTES" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT
        echo "contributors=$SLACK_MENTIONS" >> $GITHUB_OUTPUT

    - name: Format release notes
      if: inputs.type == 'release'
      id: format-notes
      shell: bash
      run: |
        NOTES='${{ steps.auto-release.outputs.body }}'
        
        # Convert markdown to Slack format
        # Preserve line breaks first
        FORMATTED_NOTES=$(echo "$NOTES" | sed 's/$/\n/g' | tr -d '\000')
        # Convert **bold** to *bold* (Slack uses single asterisks for bold)
        FORMATTED_NOTES=$(echo "$FORMATTED_NOTES" | sed 's/\*\*\([^*]*\)\*\*/\*\1\*/g')
        # Convert _italic_ to _italic_ (keep as is)
        # Convert [link](url) to <url|link>
        FORMATTED_NOTES=$(echo "$FORMATTED_NOTES" | sed 's/\[\([^]]*\)\](\([^)]*\))/<\2|\1>/g')
        # Convert GitHub @mentions to Slack mentions
        FORMATTED_NOTES=$(echo "$FORMATTED_NOTES" | sed 's/@\([a-zA-Z0-9_-]*\)/`@\1`/g')
        
        # Truncate if too long (Slack has limits)
        if [ ${#FORMATTED_NOTES} -gt 1500 ]; then
          FORMATTED_NOTES="${FORMATTED_NOTES:0:1497}..."
        fi
        
        echo "formatted<<EOF" >> $GITHUB_OUTPUT
        echo "$FORMATTED_NOTES" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT

    - name: Extract repository name
      id: repo-name
      shell: bash
      run: |
        REPO_NAME=$(echo "${{ inputs.repository }}" | cut -d'/' -f2)
        echo "name=$REPO_NAME" >> $GITHUB_OUTPUT

    - name: Send release notification
      if: inputs.type == 'release'
      id: slack-release
      uses: slackapi/slack-github-action@v2
      with:
        method: chat.postMessage
        token: ${{ inputs.slack-bot-token }}
        errors: true
        payload: |
          {
            "channel": "${{ inputs.channel }}",
            "text": "New ${{ steps.repo-name.outputs.name }} release: ${{ steps.auto-release.outputs.tag }}",
            "blocks": [
              {
                "type": "section",
                "text": {
                  "type": "mrkdwn",
                  "text": "🚀 *New ${{ steps.repo-name.outputs.name }} release: ${{ steps.auto-release.outputs.tag }}*"
                }
              },
              {
                "type": "section",
                "fields": [
                  {
                    "type": "mrkdwn",
                    "text": "*Released by:*\n${{ steps.map-user.outputs.slack-mention }}"
                  },
                  {
                    "type": "mrkdwn",
                    "text": "*Branch:*\n`${{ inputs.branch }}`"
                  }
                ]
              },
              {
                "type": "section",
                "text": {
                  "type": "mrkdwn",
                  "text": "*Release Notes:*"
                }
              },
              {
                "type": "section",
                "text": {
                  "type": "mrkdwn",
                  "text": "```${{ steps.format-notes.outputs.formatted }}```"
                }
              },
              {
                "type": "section",
                "text": {
                  "type": "mrkdwn",
                  "text": "*Contributors:*\n${{ steps.release-contributors.outputs.mentions || 'No contributors found' }}"
                }
              },
              {
                "type": "actions",
                "elements": [
                  {
                    "type": "button",
                    "text": {
                      "type": "plain_text",
                      "text": "View Release"
                    },
                    "url": "${{ steps.auto-release.outputs.url }}"
                  }
                ]
              }
            ]
          }

    - name: Extract and set timestamp and channel ID
      if: inputs.type == 'release'
      id: extract-ts
      shell: bash
      run: |
        RESPONSE='${{ steps.slack-release.outputs.response }}'
        TIMESTAMP=$(echo "$RESPONSE" | jq -r '.ts')
        CHANNEL_ID=$(echo "$RESPONSE" | jq -r '.channel')
        echo "timestamp=$TIMESTAMP" >> $GITHUB_OUTPUT
        echo "channel_id=$CHANNEL_ID" >> $GITHUB_OUTPUT
        echo "Release message timestamp: $TIMESTAMP"
        echo "Channel ID: $CHANNEL_ID"

    - name: Debug deployment threading
      if: inputs.type == 'deployment-success' || inputs.type == 'deployment-failure'
      shell: bash
      run: |
        echo "Thread timestamp: '${{ inputs.thread-ts }}'"
        echo "Channel: '${{ inputs.channel }}'"
        echo "Environment: '${{ inputs.environment }}'"

    - name: Debug reaction parameters
      if: inputs.type == 'deployment-success' || inputs.type == 'deployment-failure'
      shell: bash
      run: |
        echo "Reaction debug info:"
        echo "Channel: '${{ inputs.channel }}'"
        echo "Timestamp: '${{ inputs.thread-ts }}'"
        TS="${{ inputs.thread-ts }}"
        echo "Timestamp length: ${#TS}"

    - name: Add in-progress reaction to original post
      if: inputs.type == 'deployment-success' || inputs.type == 'deployment-failure'
      uses: slackapi/slack-github-action@v2
      with:
        method: reactions.add
        token: ${{ inputs.slack-bot-token }}
        errors: true
        payload: |
          {
            "channel": "${{ inputs.channel-id || inputs.channel }}",
            "timestamp": "${{ inputs.thread-ts }}",
            "name": "hourglass_flowing_sand"
          }

    - name: Send deployment success notification
      if: inputs.type == 'deployment-success'
      uses: slackapi/slack-github-action@v2
      with:
        method: chat.postMessage
        token: ${{ inputs.slack-bot-token }}
        errors: true
        payload: |
          {
            "channel": "${{ inputs.channel }}",
            "thread_ts": "${{ inputs.thread-ts }}",
            "text": "✅ Deployment to ${{ inputs.environment }} successful! <${{ steps.workflow-url.outputs.url }}|View workflow>"
          }

    - name: Remove in-progress reaction from original post
      if: inputs.type == 'deployment-success'
      uses: slackapi/slack-github-action@v2
      with:
        method: reactions.remove
        token: ${{ inputs.slack-bot-token }}
        errors: true
        payload: |
          {
            "channel": "${{ inputs.channel-id || inputs.channel }}",
            "timestamp": "${{ inputs.thread-ts }}",
            "name": "hourglass_flowing_sand"
          }

    - name: Add success reaction to original post
      if: inputs.type == 'deployment-success'
      uses: slackapi/slack-github-action@v2
      with:
        method: reactions.add
        token: ${{ inputs.slack-bot-token }}
        errors: true
        payload: |
          {
            "channel": "${{ inputs.channel-id || inputs.channel }}",
            "timestamp": "${{ inputs.thread-ts }}",
            "name": "white_check_mark"
          }

    - name: Send deployment failure notification
      if: inputs.type == 'deployment-failure'
      uses: slackapi/slack-github-action@v2
      with:
        method: chat.postMessage
        token: ${{ inputs.slack-bot-token }}
        errors: true
        payload: |
          {
            "channel": "${{ inputs.channel }}",
            "thread_ts": "${{ inputs.thread-ts }}",
            "text": "❌ Deployment to ${{ inputs.environment }} failed! <${{ steps.workflow-url.outputs.url }}|View workflow>"
          }

    - name: Remove in-progress reaction from original post
      if: inputs.type == 'deployment-failure'
      uses: slackapi/slack-github-action@v2
      with:
        method: reactions.remove
        token: ${{ inputs.slack-bot-token }}
        errors: true
        payload: |
          {
            "channel": "${{ inputs.channel-id || inputs.channel }}",
            "timestamp": "${{ inputs.thread-ts }}",
            "name": "hourglass_flowing_sand"
          }

    - name: Add failure reaction to original post
      if: inputs.type == 'deployment-failure'
      uses: slackapi/slack-github-action@v2
      with:
        method: reactions.add
        token: ${{ inputs.slack-bot-token }}
        errors: true
        payload: |
          {
            "channel": "${{ inputs.channel-id || inputs.channel }}",
            "timestamp": "${{ inputs.thread-ts }}",
            "name": "x"
          }

    - name: Send staging deployment notification
      if: inputs.type == 'staging'
      id: slack-staging
      uses: slackapi/slack-github-action@v2
      with:
        method: chat.postMessage
        token: ${{ inputs.slack-bot-token }}
        errors: true
        payload: |
          {
            "channel": "${{ inputs.channel }}",
            "text": "Staging Updated: ${{ inputs.environment || 'staging' }}",
            "blocks": [
              {
                "type": "section",
                "text": {
                  "type": "mrkdwn",
                  "text": "🔄 *Staging Updated*"
                }
              },
              {
                "type": "section",
                "fields": [
                  {
                    "type": "mrkdwn",
                    "text": "*Repository:*\n${{ steps.repo-name.outputs.name }}"
                  },
                  {
                    "type": "mrkdwn",
                    "text": "*Environment:*\n`${{ inputs.environment || 'staging' }}`"
                  },
                  {
                    "type": "mrkdwn",
                    "text": "*Branch:*\n`${{ inputs.branch }}`"
                  },
                  {
                    "type": "mrkdwn",
                    "text": "*Pushed by:*\n${{ steps.map-user.outputs.slack-mention }}"
                  }
                ]
              },
              {
                "type": "section",
                "text": {
                  "type": "mrkdwn",
                  "text": "*Recent Changes:*"
                }
              },
              {
                "type": "context",
                "elements": [
                  {
                    "type": "mrkdwn",
                    "text": "${{ steps.staging-notes.outputs.notes || inputs.commit-message || 'No recent changes available' }}"
                  }
                ]
              },
              {
                "type": "section",
                "text": {
                  "type": "mrkdwn",
                  "text": "*Contributors:*\n${{ steps.staging-notes.outputs.contributors || 'No contributors found' }}"
                }
              },
              {
                "type": "context",
                "elements": [
                  {
                    "type": "mrkdwn",
                    "text": "Commit: `${{ inputs.commit-sha || github.sha }}`"
                  }
                ]
              },
              {
                "type": "actions",
                "elements": [
                  {
                    "type": "button",
                    "text": {
                      "type": "plain_text",
                      "text": "View Staging"
                    },
                    "url": "${{ inputs.staging-url || 'https://staging.example.com' }}"
                  }
                ]
              }
            ]
          }

    - name: Debug Slack response
      if: inputs.type == 'staging'
      shell: bash
      run: |
        echo "Slack API Response:"
        echo "Status: ${{ steps.slack-staging.outputs.ok }}"
        echo "Error: ${{ steps.slack-staging.outputs.error }}"
        echo "Response (truncated): $(echo '${{ steps.slack-staging.outputs.response }}' | head -c 200)"

branding:
  icon: 'message-square'
  color: 'blue'