name: 'Spice Labs Slack Notifications'
description: 'Send standardized release, deployment, and staging notifications to Slack with GitHub→Slack username mapping'
author: 'Spice Labs Inc'

inputs:
  # Required
  type:
    description: 'Notification type: release, deployment-success, deployment-failure, staging'
    required: true
  slack-bot-token:
    description: 'Slack bot token (xoxb-...)'
    required: true
  channel:
    description: 'Slack channel ID or name (e.g. #releases or C1234567890)'
    required: true
    default: '#release-notifications'
  
  # GitHub→Slack username mapping
  username-mapping:
    description: 'JSON object mapping GitHub usernames to Slack user IDs {"github_user": "U1234567890"}'
    required: false
  
  # Release notification inputs (auto-generated by default)
  release-tag:
    description: 'Release tag (e.g. v1.2.3) - optional, will use latest release if not provided'
    required: false
  github-token:
    description: 'GitHub token for API access - required for auto-generation'
    required: false
    
  # Deployment notification inputs
  workflow-name:
    description: 'Name of the workflow/deployment - required for deployment types'
    required: false
  workflow-url:
    description: 'Link to the workflow run - auto-generated if not provided'
    required: false
  environment:
    description: 'Deployment environment (e.g. production, staging) - required for deployment types'
    required: false
    
  # Staging notification inputs
  commit-message:
    description: 'Commit message for staging deployments'
    required: false
  staging-url:
    description: 'URL to the staging environment'
    required: false
    
  # Common optional inputs
  actor:
    description: 'GitHub username who triggered the action'
    required: false
    default: ${{ github.actor }}
  repository:
    description: 'Repository name'
    required: false
    default: ${{ github.repository }}
  branch:
    description: 'Branch name'
    required: false
    default: ${{ github.ref_name }}
  commit-sha:
    description: 'Commit SHA (short version recommended)'
    required: false

runs:
  using: 'composite'
  steps:
    - name: Validate inputs
      shell: bash
      run: |
        case "${{ inputs.type }}" in
          "release")
            if [ -z "${{ inputs.github-token }}" ]; then
              echo "ERROR: 'github-token' required for release notifications"
              exit 1
            fi
            ;;
          "deployment-success"|"deployment-failure")
            if [ -z "${{ inputs.workflow-name }}" ] || [ -z "${{ inputs.environment }}" ]; then
              echo "ERROR: deployment notifications require 'workflow-name' and 'environment' inputs"
              exit 1
            fi
            ;;
          "staging")
            # Staging is more flexible, no required fields beyond the common ones
            ;;
          *)
            echo "ERROR: Invalid notification type '${{ inputs.type }}'. Must be: release, deployment-success, deployment-failure, or staging"
            exit 1
            ;;
        esac

    - name: Map GitHub username to Slack
      id: map-user
      shell: bash
      run: |
        MAPPING='${{ inputs.username-mapping }}'
        GITHUB_USER="${{ inputs.actor }}"
        
        if [ "$MAPPING" != "{}" ] && [ -n "$MAPPING" ]; then
          SLACK_USER=$(echo "$MAPPING" | jq -r --arg user "$GITHUB_USER" '.[$user] // $user')
        else
          SLACK_USER="$GITHUB_USER"
        fi
        
        # Format for Slack mention if it's a Slack user ID (starts with U and 11 chars total)
        if [[ $SLACK_USER =~ ^U[A-Z0-9]{10}$ ]]; then
          echo "slack-mention=<@$SLACK_USER>" >> $GITHUB_OUTPUT
        else
          echo "slack-mention=@$SLACK_USER" >> $GITHUB_OUTPUT
        fi

    - name: Auto-generate release info
      if: inputs.type == 'release'
      id: auto-release
      shell: bash
      run: |
        # Get latest release if no tag specified
        if [ -z "${{ inputs.release-tag }}" ]; then
          RELEASE_INFO=$(curl -s -H "Authorization: token ${{ inputs.github-token }}" \
            "https://api.github.com/repos/${{ inputs.repository }}/releases/latest")
          TAG_NAME=$(echo "$RELEASE_INFO" | jq -r '.tag_name')
          RELEASE_NAME=$(echo "$RELEASE_INFO" | jq -r '.name // .tag_name')
          RELEASE_BODY=$(echo "$RELEASE_INFO" | jq -r '.body // ""')
          RELEASE_URL=$(echo "$RELEASE_INFO" | jq -r '.html_url')
        else
          # Get specific release by tag
          RELEASE_INFO=$(curl -s -H "Authorization: token ${{ inputs.github-token }}" \
            "https://api.github.com/repos/${{ inputs.repository }}/releases/tags/${{ inputs.release-tag }}")
          TAG_NAME="${{ inputs.release-tag }}"
          RELEASE_NAME=$(echo "$RELEASE_INFO" | jq -r '.name // .tag_name')
          RELEASE_BODY=$(echo "$RELEASE_INFO" | jq -r '.body // ""')
          RELEASE_URL=$(echo "$RELEASE_INFO" | jq -r '.html_url')
        fi
        
        echo "tag=$TAG_NAME" >> $GITHUB_OUTPUT
        echo "name=$RELEASE_NAME" >> $GITHUB_OUTPUT
        echo "url=$RELEASE_URL" >> $GITHUB_OUTPUT
        echo "body<<EOF" >> $GITHUB_OUTPUT
        echo "$RELEASE_BODY" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT

    - name: Generate workflow URL
      if: startsWith(inputs.type, 'deployment-')
      id: workflow-url
      shell: bash
      run: |
        if [ -n "${{ inputs.workflow-url }}" ]; then
          echo "url=${{ inputs.workflow-url }}" >> $GITHUB_OUTPUT
        else
          echo "url=https://github.com/${{ inputs.repository }}/actions" >> $GITHUB_OUTPUT
        fi

    - name: Auto-generate staging notes from commits
      if: inputs.type == 'staging' && inputs.github-token != ''
      id: staging-notes
      shell: bash
      run: |
        # Get recent commits for staging context
        COMMITS=$(curl -s -H "Authorization: token ${{ inputs.github-token }}" \
          "https://api.github.com/repos/${{ inputs.repository }}/commits?sha=${{ inputs.branch }}&per_page=5")
        
        # Format commits into readable notes with links
        COMMIT_NOTES=$(echo "$COMMITS" | jq -r --arg repo "${{ inputs.repository }}" '.[] | "• <https://github.com/" + $repo + "/commit/" + .sha + "|" + .commit.message + ">"' | head -5)
        
        echo "notes<<EOF" >> $GITHUB_OUTPUT
        echo "$COMMIT_NOTES" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT

    - name: Format release notes
      if: inputs.type == 'release'
      id: format-notes
      shell: bash
      run: |
        NOTES='${{ steps.auto-release.outputs.body }}'
        
        # Convert GitHub @mentions to Slack format (basic conversion)
        FORMATTED_NOTES=$(echo "$NOTES" | sed 's/@\([a-zA-Z0-9_-]*\)/`@\1`/g')
        
        # Truncate if too long (Slack has limits)
        if [ ${#FORMATTED_NOTES} -gt 1500 ]; then
          FORMATTED_NOTES="${FORMATTED_NOTES:0:1497}..."
        fi
        
        echo "formatted<<EOF" >> $GITHUB_OUTPUT
        echo "$FORMATTED_NOTES" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT

    - name: Send release notification
      if: inputs.type == 'release'
      uses: slackapi/slack-github-action@v2
      with:
        method: chat.postMessage
        token: ${{ inputs.slack-bot-token }}
        errors: true
        payload: |
          {
            "channel": "${{ inputs.channel }}",
            "text": "New Release: ${{ steps.auto-release.outputs.name || steps.auto-release.outputs.tag }}",
            "blocks": [
              {
                "type": "section",
                "text": {
                  "type": "mrkdwn",
                  "text": "🚀 *New Release: ${{ steps.auto-release.outputs.name || steps.auto-release.outputs.tag }}*"
                }
              },
              {
                "type": "section",
                "fields": [
                  {
                    "type": "mrkdwn",
                    "text": "*Repository:*\n${{ inputs.repository }}"
                  },
                  {
                    "type": "mrkdwn", 
                    "text": "*Version:*\n`${{ steps.auto-release.outputs.tag }}`"
                  },
                  {
                    "type": "mrkdwn",
                    "text": "*Released by:*\n${{ steps.map-user.outputs.slack-mention }}"
                  },
                  {
                    "type": "mrkdwn",
                    "text": "*Branch:*\n`${{ inputs.branch }}`"
                  }
                ]
              },
              {
                "type": "section",
                "text": {
                  "type": "mrkdwn",
                  "text": "*Release Notes:*\n${{ steps.format-notes.outputs.formatted }}"
                }
              },
              {
                "type": "actions",
                "elements": [
                  {
                    "type": "button",
                    "text": {
                      "type": "plain_text",
                      "text": "View Release"
                    },
                    "url": "${{ steps.auto-release.outputs.url }}"
                  }
                ]
              }
            ]
          }

    - name: Send deployment success notification
      if: inputs.type == 'deployment-success'
      uses: slackapi/slack-github-action@v2
      with:
        method: chat.postMessage
        token: ${{ inputs.slack-bot-token }}
        errors: true
        payload: |
          {
            "channel": "${{ inputs.channel }}",
            "text": "Deployment Successful: ${{ inputs.environment }}",
            "blocks": [
              {
                "type": "section",
                "text": {
                  "type": "mrkdwn",
                  "text": "✅ *Deployment Successful*"
                }
              },
              {
                "type": "section",
                "fields": [
                  {
                    "type": "mrkdwn",
                    "text": "*Repository:*\n${{ inputs.repository }}"
                  },
                  {
                    "type": "mrkdwn",
                    "text": "*Environment:*\n`${{ inputs.environment }}`"
                  },
                  {
                    "type": "mrkdwn",
                    "text": "*Workflow:*\n${{ inputs.workflow-name }}"
                  },
                  {
                    "type": "mrkdwn",
                    "text": "*Deployed by:*\n${{ steps.map-user.outputs.slack-mention }}"
                  }
                ]
              },
              {
                "type": "actions",
                "elements": [
                  {
                    "type": "button",
                    "text": {
                      "type": "plain_text",
                      "text": "View Workflow"
                    },
                    "url": "${{ steps.workflow-url.outputs.url }}"
                  }
                ]
              }
            ]
          }

    - name: Send deployment failure notification
      if: inputs.type == 'deployment-failure'
      uses: slackapi/slack-github-action@v2
      with:
        method: chat.postMessage
        token: ${{ inputs.slack-bot-token }}
        errors: true
        payload: |
          {
            "channel": "${{ inputs.channel }}",
            "text": "Deployment Failed: ${{ inputs.environment }}",
            "blocks": [
              {
                "type": "section",
                "text": {
                  "type": "mrkdwn",
                  "text": "❌ *Deployment Failed*"
                }
              },
              {
                "type": "section",
                "fields": [
                  {
                    "type": "mrkdwn",
                    "text": "*Repository:*\n${{ inputs.repository }}"
                  },
                  {
                    "type": "mrkdwn",
                    "text": "*Environment:*\n`${{ inputs.environment }}`"
                  },
                  {
                    "type": "mrkdwn",
                    "text": "*Workflow:*\n${{ inputs.workflow-name }}"
                  },
                  {
                    "type": "mrkdwn",
                    "text": "*Failed for:*\n${{ steps.map-user.outputs.slack-mention }}"
                  }
                ]
              },
              {
                "type": "actions",
                "elements": [
                  {
                    "type": "button",
                    "text": {
                      "type": "plain_text",
                      "text": "View Failed Workflow",
                      "emoji": true
                    },
                    "url": "${{ steps.workflow-url.outputs.url }}",
                    "style": "danger"
                  }
                ]
              }
            ]
          }

    - name: Send staging deployment notification
      if: inputs.type == 'staging'
      id: slack-staging
      uses: slackapi/slack-github-action@v2
      with:
        method: chat.postMessage
        token: ${{ inputs.slack-bot-token }}
        errors: true
        payload: |
          {
            "channel": "${{ inputs.channel }}",
            "text": "Staging Updated: ${{ inputs.environment || 'staging' }}",
            "blocks": [
              {
                "type": "section",
                "text": {
                  "type": "mrkdwn",
                  "text": "🔄 *Staging Updated*"
                }
              },
              {
                "type": "section",
                "fields": [
                  {
                    "type": "mrkdwn",
                    "text": "*Repository:*\n${{ inputs.repository }}"
                  },
                  {
                    "type": "mrkdwn",
                    "text": "*Environment:*\n`${{ inputs.environment || 'staging' }}`"
                  },
                  {
                    "type": "mrkdwn",
                    "text": "*Branch:*\n`${{ inputs.branch }}`"
                  },
                  {
                    "type": "mrkdwn",
                    "text": "*Pushed by:*\n${{ steps.map-user.outputs.slack-mention }}"
                  }
                ]
              },
              {
                "type": "section",
                "text": {
                  "type": "mrkdwn",
                  "text": "*Recent Changes:*\n${{ steps.staging-notes.outputs.notes || inputs.commit-message || 'No recent changes available' }}"
                }
              },
              {
                "type": "context",
                "elements": [
                  {
                    "type": "mrkdwn",
                    "text": "Commit: `${{ inputs.commit-sha || github.sha }}`"
                  }
                ]
              },
              {
                "type": "actions",
                "elements": [
                  {
                    "type": "button",
                    "text": {
                      "type": "plain_text",
                      "text": "View Staging"
                    },
                    "url": "${{ inputs.staging-url || 'https://staging.example.com' }}"
                  }
                ]
              }
            ]
          }

    - name: Debug Slack response
      if: inputs.type == 'staging'
      shell: bash
      run: |
        echo "Slack API Response:"
        echo "Status: ${{ steps.slack-staging.outputs.ok }}"
        echo "Error: ${{ steps.slack-staging.outputs.error }}"
        echo "Response: ${{ steps.slack-staging.outputs.response }}"

branding:
  icon: 'message-square'
  color: 'blue'